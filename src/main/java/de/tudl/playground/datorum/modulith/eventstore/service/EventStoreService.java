package de.tudl.playground.datorum.modulith.eventstore.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import de.tudl.playground.datorum.modulith.eventstore.EventStore;
import de.tudl.playground.datorum.modulith.eventstore.EventStoreRepository;
import java.time.LocalDateTime;
import org.springframework.stereotype.Service;

/**
 * Service responsible for persisting events in the Event Store.
 * <p>
 * This service provides functionality to store events in a dedicated event store.
 * It serializes event data into JSON format and saves metadata such as the aggregate ID,
 * event type, and timestamp to the event store. The persisted events can later be used for
 * event sourcing, audit logs, or debugging purposes.
 * </p>
 * <p>
 * Typical use cases include:
 * <ul>
 *   <li>Storing domain events generated by aggregates for event sourcing.</li>
 *   <li>Persisting events for audit trails and historical analysis.</li>
 *   <li>Ensuring all domain events are stored reliably in a centralized event store.</li>
 * </ul>
 * </p>
 *
 * <h3>Thread Safety</h3>
 * This service is thread-safe as long as the underlying {@link EventStoreRepository} implementation is thread-safe.
 */
@Service
public class EventStoreService {

    private final EventStoreRepository eventStoreRepository;

    /**
     * Constructs an {@code EventStoreService} with the specified {@link EventStoreRepository}.
     *
     * @param eventStoreRepository the repository used to persist events in the event store.
     */
    public EventStoreService(EventStoreRepository eventStoreRepository) {
        this.eventStoreRepository = eventStoreRepository;
    }

    /**
     * Stores an event in the Event Store.
     * <p>
     * This method serializes the provided event into JSON format and saves it in the event store,
     * along with its aggregate ID, event type, and the current timestamp.
     * </p>
     *
     * <h3>Example</h3>
     * <pre>
     * {@code
     * EventStoreService eventStoreService = new EventStoreService(eventStoreRepository);
     *
     * MyEvent event = new MyEvent("example data");
     * eventStoreService.saveEvent("aggregate-123", event);
     * }
     * </pre>
     *
     * @param aggregateId the unique identifier of the aggregate associated with the event.
     *                    This identifier helps group events by aggregate.
     * @param event the event object to be persisted. The object must be serializable into JSON format.
     * @throws RuntimeException if an error occurs while serializing the event or saving it to the repository.
     */
    public void saveEvent(String aggregateId, Object event) {
        try {
            EventStore eventStore = new EventStore();
            eventStore.setAggregateId(aggregateId);
            eventStore.setEventType(event.getClass().getSimpleName());
            eventStore.setEventData(new ObjectMapper().writeValueAsString(event));
            eventStore.setCreatedAt(LocalDateTime.now());

            eventStoreRepository.save(eventStore);
        } catch (Exception e) {
            throw new RuntimeException("Failed to save event to Event Store", e);
        }
    }
}
